{"id":"node_modules/opentype.js/src/util.js","dependencies":[{"name":"C:\\Users\\student\\code\\airbnb-clone\\package.json","includedInParent":true,"mtime":1603166701328},{"name":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\package.json","includedInParent":true,"mtime":1603166700396},{"name":"buffer","parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\util.js","resolved":"C:\\Users\\student\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nexports.isBrowser = function() {\n    return typeof window !== 'undefined';\n};\n\nexports.isNode = function() {\n    return typeof window === 'undefined';\n};\n\nexports.nodeBufferToArrayBuffer = function(buffer) {\n    var ab = new ArrayBuffer(buffer.length);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n\n    return ab;\n};\n\nexports.arrayBufferToNodeBuffer = function(ab) {\n    var buffer = new Buffer(ab.byteLength);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n};\n\nexports.checkArgument = function(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opentype.js/src/util.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/opentype.js/src/util.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}}],"sources":{"node_modules/opentype.js/src/util.js":"'use strict';\n\nexports.isBrowser = function() {\n    return typeof window !== 'undefined';\n};\n\nexports.isNode = function() {\n    return typeof window === 'undefined';\n};\n\nexports.nodeBufferToArrayBuffer = function(buffer) {\n    var ab = new ArrayBuffer(buffer.length);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n\n    return ab;\n};\n\nexports.arrayBufferToNodeBuffer = function(ab) {\n    var buffer = new Buffer(ab.byteLength);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n};\n\nexports.checkArgument = function(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n};\n"},"lineCount":37}},"error":null,"hash":"1ff3219935bcb8d33f60f5822871002d","cacheData":{"env":{}}}