{"id":"node_modules/opentype.js/src/substitution.js","dependencies":[{"name":"C:\\Users\\student\\code\\airbnb-clone\\package.json","includedInParent":true,"mtime":1603166701328},{"name":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\package.json","includedInParent":true,"mtime":1603166700396},{"name":"./check","loc":{"line":6,"column":20},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\substitution.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\check.js"},{"name":"./layout","loc":{"line":7,"column":21},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\substitution.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\layout.js"}],"generated":{"js":"// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\n\n'use strict';\n\nvar check = require('./check');\nvar Layout = require('./layout');\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nvar Substitution = function(font) {\n    Layout.call(this, font, 'gsub');\n};\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    var n = ar1.length;\n    if (n !== ar2.length) { return false; }\n    for (var i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) { return false; }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    var subtables = lookupTable.subtables;\n    for (var i = 0; i < subtables.length; i++) {\n        var subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n}\n\nSubstitution.prototype = Layout.prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function() {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [{\n            tag: 'DFLT',\n            script: {\n                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                langSysRecords: []\n            }\n        }],\n        features: [],\n        lookups: []\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j;\n            if (subtable.substFormat === 1) {\n                var delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    var glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                var substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    var alternates = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var alternateSets = subtable.alternateSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    var ligatures = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var ligatureSets = subtable.ligatureSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                var startGlyph = glyphs[j];\n                var ligSet = ligatureSets[j];\n                for (var k = 0; k < ligSet.length; k++) {\n                    var lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: { format: 1, glyphs: [] },\n        substitute: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: { format: 1, glyphs: [] },\n        alternateSets: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    var subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = ligature.sub[0];\n    var ligComponents = ligature.sub.slice(1);\n    var ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        var ligatureSet = subtable.ligatureSets[pos];\n        for (var i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language)\n                    .concat(this.getAlternates(feature, script, language));\n        case 'dlig':\n        case 'liga':\n        case 'rlig': return this.getLigatures(feature, script, language);\n    }\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n    }\n};\n\nmodule.exports = Substitution;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/opentype.js/src/substitution.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}}],"sources":{"node_modules/opentype.js/src/substitution.js":"// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\n\n'use strict';\n\nvar check = require('./check');\nvar Layout = require('./layout');\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nvar Substitution = function(font) {\n    Layout.call(this, font, 'gsub');\n};\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    var n = ar1.length;\n    if (n !== ar2.length) { return false; }\n    for (var i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) { return false; }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    var subtables = lookupTable.subtables;\n    for (var i = 0; i < subtables.length; i++) {\n        var subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n}\n\nSubstitution.prototype = Layout.prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function() {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [{\n            tag: 'DFLT',\n            script: {\n                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                langSysRecords: []\n            }\n        }],\n        features: [],\n        lookups: []\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j;\n            if (subtable.substFormat === 1) {\n                var delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    var glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                var substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    var alternates = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var alternateSets = subtable.alternateSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    var ligatures = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var ligatureSets = subtable.ligatureSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                var startGlyph = glyphs[j];\n                var ligSet = ligatureSets[j];\n                for (var k = 0; k < ligSet.length; k++) {\n                    var lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: { format: 1, glyphs: [] },\n        substitute: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: { format: 1, glyphs: [] },\n        alternateSets: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    var subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = ligature.sub[0];\n    var ligComponents = ligature.sub.slice(1);\n    var ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        var ligatureSet = subtable.ligatureSets[pos];\n        for (var i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language)\n                    .concat(this.getAlternates(feature, script, language));\n        case 'dlig':\n        case 'liga':\n        case 'rlig': return this.getLigatures(feature, script, language);\n    }\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n    }\n};\n\nmodule.exports = Substitution;\n"},"lineCount":302}},"error":null,"hash":"811a0479417c8019942af61c87ee581a","cacheData":{"env":{}}}