{"id":"node_modules/opentype.js/src/tables/maxp.js","dependencies":[{"name":"C:\\Users\\student\\code\\airbnb-clone\\package.json","includedInParent":true,"mtime":1603166701328},{"name":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\package.json","includedInParent":true,"mtime":1603166700396},{"name":"../parse","loc":{"line":7,"column":20},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\maxp.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\parse.js"},{"name":"../table","loc":{"line":8,"column":20},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\maxp.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\table.js"}],"generated":{"js":"// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\n'use strict';\n\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    var maxp = {};\n    var p = new parse.Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new table.Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\nexports.parse = parseMaxpTable;\nexports.make = makeMaxpTable;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/opentype.js/src/tables/maxp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"node_modules/opentype.js/src/tables/maxp.js":"// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\n'use strict';\n\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    var maxp = {};\n    var p = new parse.Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new table.Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\nexports.parse = parseMaxpTable;\nexports.make = makeMaxpTable;\n"},"lineCount":44}},"error":null,"hash":"768b2e745587a38c4d25fed76895b3e7","cacheData":{"env":{}}}