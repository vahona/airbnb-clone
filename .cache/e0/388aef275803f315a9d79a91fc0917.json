{"id":"node_modules/opentype.js/src/tables/glyf.js","dependencies":[{"name":"C:\\Users\\student\\code\\airbnb-clone\\package.json","includedInParent":true,"mtime":1603166701328},{"name":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\package.json","includedInParent":true,"mtime":1603166700396},{"name":"../check","loc":{"line":6,"column":20},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\glyf.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\check.js"},{"name":"../glyphset","loc":{"line":7,"column":23},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\glyf.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\glyphset.js"},{"name":"../parse","loc":{"line":8,"column":20},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\glyf.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\parse.js"},{"name":"../path","loc":{"line":9,"column":19},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\glyf.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\path.js"}],"generated":{"js":"// The `glyf` table describes the glyphs in TrueType outline format.\n// http://www.microsoft.com/typography/otspec/glyf.htm\n\n'use strict';\n\nvar check = require('../check');\nvar glyphset = require('../glyphset');\nvar parse = require('../parse');\nvar path = require('../path');\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(glyph, data, start) {\n    var p = new parse.Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    var flags;\n    var flag;\n    if (glyph.numberOfContours > 0) {\n        var i;\n        // This glyph is not a composite.\n        var endPointIndices = glyph.endPointIndices = [];\n        for (i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (i = 0; i < glyph.instructionLength; i += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (i = 0; i < numberOfCoordinates; i += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for (var j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i += 1;\n                }\n            }\n        }\n\n        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;\n                    points.push(point);\n                }\n\n                var px = 0;\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                var py = 0;\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                }\n\n            } else {\n                // The arguments are bytes\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n                }\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n    }\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        var newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    var p = new path.Path();\n    if (!points) {\n        return p;\n    }\n\n    var contours = getContours(points);\n    for (var i = 0; i < contours.length; i += 1) {\n        var contour = contours[i];\n        var firstPt = contour[0];\n        var lastPt = contour[contour.length - 1];\n        var curvePt;\n        var realFirstPoint;\n        if (firstPt.onCurve) {\n            curvePt = null;\n            // The first point will be consumed by the moveTo command,\n            // so skip it in the loop.\n            realFirstPoint = true;\n        } else {\n            if (lastPt.onCurve) {\n                // If the first point is off-curve and the last point is on-curve,\n                // start at the last point.\n                firstPt = lastPt;\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };\n            }\n\n            curvePt = firstPt;\n            // The first point is synthesized, so don't skip the real first point.\n            realFirstPoint = false;\n        }\n\n        p.moveTo(firstPt.x, firstPt.y);\n\n        for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {\n            var pt = contour[j];\n            var prevPt = j === 0 ? firstPt : contour[j - 1];\n            if (prevPt.onCurve && pt.onCurve) {\n                // This is a straight line.\n                p.lineTo(pt.x, pt.y);\n            } else if (prevPt.onCurve && !pt.onCurve) {\n                curvePt = pt;\n            } else if (!prevPt.onCurve && !pt.onCurve) {\n                var midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };\n                p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);\n                curvePt = pt;\n            } else if (!prevPt.onCurve && pt.onCurve) {\n                // Previous point off-curve, this point on-curve.\n                p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n                curvePt = null;\n            } else {\n                throw new Error('Invalid state.');\n            }\n        }\n\n        if (firstPt !== lastPt) {\n            // Connect the last and first points\n            if (curvePt) {\n                p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n            } else {\n                p.lineTo(firstPt.x, firstPt.y);\n            }\n        }\n    }\n\n    p.closePath();\n    return p;\n}\n\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for (var j = 0; j < glyph.components.length; j += 1) {\n            var component = glyph.components[j];\n            var componentGlyph = glyphs.get(component.glyphIndex);\n            // Force the ttfGlyphLoader to parse the glyph.\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                var transformedPoints;\n                if (component.matchedPoints === undefined) {\n                    // component positioned by offset\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    // component positioned by matched points\n                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                        throw Error('Matched points out of range in ' + glyph.name);\n                    }\n                    var firstPt = glyph.points[component.matchedPoints[0]];\n                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    var transform = {\n                        xScale: component.xScale, scale01: component.scale01,\n                        scale10: component.scale10, yScale: component.yScale,\n                        dx: 0, dy: 0\n                    };\n                    secondPt = transformPoints([secondPt], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n\n    return getPath(glyph.points);\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n    var i;\n\n    // The last element of the loca table is invalid.\n    for (i = 0; i < loca.length - 1; i += 1) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    }\n\n    return glyphs;\n}\n\nexports.parse = parseGlyfTable;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/opentype.js/src/tables/glyf.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}}],"sources":{"node_modules/opentype.js/src/tables/glyf.js":"// The `glyf` table describes the glyphs in TrueType outline format.\n// http://www.microsoft.com/typography/otspec/glyf.htm\n\n'use strict';\n\nvar check = require('../check');\nvar glyphset = require('../glyphset');\nvar parse = require('../parse');\nvar path = require('../path');\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(glyph, data, start) {\n    var p = new parse.Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    var flags;\n    var flag;\n    if (glyph.numberOfContours > 0) {\n        var i;\n        // This glyph is not a composite.\n        var endPointIndices = glyph.endPointIndices = [];\n        for (i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (i = 0; i < glyph.instructionLength; i += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (i = 0; i < numberOfCoordinates; i += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for (var j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i += 1;\n                }\n            }\n        }\n\n        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;\n                    points.push(point);\n                }\n\n                var px = 0;\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                var py = 0;\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                }\n\n            } else {\n                // The arguments are bytes\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n                }\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n    }\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        var newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    var p = new path.Path();\n    if (!points) {\n        return p;\n    }\n\n    var contours = getContours(points);\n    for (var i = 0; i < contours.length; i += 1) {\n        var contour = contours[i];\n        var firstPt = contour[0];\n        var lastPt = contour[contour.length - 1];\n        var curvePt;\n        var realFirstPoint;\n        if (firstPt.onCurve) {\n            curvePt = null;\n            // The first point will be consumed by the moveTo command,\n            // so skip it in the loop.\n            realFirstPoint = true;\n        } else {\n            if (lastPt.onCurve) {\n                // If the first point is off-curve and the last point is on-curve,\n                // start at the last point.\n                firstPt = lastPt;\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };\n            }\n\n            curvePt = firstPt;\n            // The first point is synthesized, so don't skip the real first point.\n            realFirstPoint = false;\n        }\n\n        p.moveTo(firstPt.x, firstPt.y);\n\n        for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {\n            var pt = contour[j];\n            var prevPt = j === 0 ? firstPt : contour[j - 1];\n            if (prevPt.onCurve && pt.onCurve) {\n                // This is a straight line.\n                p.lineTo(pt.x, pt.y);\n            } else if (prevPt.onCurve && !pt.onCurve) {\n                curvePt = pt;\n            } else if (!prevPt.onCurve && !pt.onCurve) {\n                var midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };\n                p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);\n                curvePt = pt;\n            } else if (!prevPt.onCurve && pt.onCurve) {\n                // Previous point off-curve, this point on-curve.\n                p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n                curvePt = null;\n            } else {\n                throw new Error('Invalid state.');\n            }\n        }\n\n        if (firstPt !== lastPt) {\n            // Connect the last and first points\n            if (curvePt) {\n                p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n            } else {\n                p.lineTo(firstPt.x, firstPt.y);\n            }\n        }\n    }\n\n    p.closePath();\n    return p;\n}\n\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for (var j = 0; j < glyph.components.length; j += 1) {\n            var component = glyph.components[j];\n            var componentGlyph = glyphs.get(component.glyphIndex);\n            // Force the ttfGlyphLoader to parse the glyph.\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                var transformedPoints;\n                if (component.matchedPoints === undefined) {\n                    // component positioned by offset\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    // component positioned by matched points\n                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                        throw Error('Matched points out of range in ' + glyph.name);\n                    }\n                    var firstPt = glyph.points[component.matchedPoints[0]];\n                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    var transform = {\n                        xScale: component.xScale, scale01: component.scale01,\n                        scale10: component.scale10, yScale: component.yScale,\n                        dx: 0, dy: 0\n                    };\n                    secondPt = transformPoints([secondPt], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n\n    return getPath(glyph.points);\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n    var i;\n\n    // The last element of the loca table is invalid.\n    for (i = 0; i < loca.length - 1; i += 1) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    }\n\n    return glyphs;\n}\n\nexports.parse = parseGlyfTable;\n"},"lineCount":336}},"error":null,"hash":"9043ab651103dbbad8e336bfb9838f5a","cacheData":{"env":{}}}