{"id":"node_modules/opentype.js/src/font.js","dependencies":[{"name":"C:\\Users\\student\\code\\airbnb-clone\\package.json","includedInParent":true,"mtime":1603166701328},{"name":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\package.json","includedInParent":true,"mtime":1603166700396},{"name":"./path","loc":{"line":5,"column":19},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\path.js"},{"name":"./tables/sfnt","loc":{"line":6,"column":19},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\sfnt.js"},{"name":"./encoding","loc":{"line":7,"column":23},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\encoding.js"},{"name":"./glyphset","loc":{"line":8,"column":23},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\glyphset.js"},{"name":"./substitution","loc":{"line":9,"column":27},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\substitution.js"},{"name":"./util","loc":{"line":10,"column":19},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\util.js"},{"name":"fs","loc":{"line":477,"column":25},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\font.js","resolved":"C:\\Users\\student\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"// The Font object\n\n'use strict';\n\nvar path = require('./path');\nvar sfnt = require('./tables/sfnt');\nvar encoding = require('./encoding');\nvar glyphset = require('./glyphset');\nvar Substitution = require('./substitution');\nvar util = require('./util');\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        util.checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n        util.checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n        util.checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n        util.checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n        util.checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n        util.checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n        this.names = {\n            fontFamily: {en: options.familyName || ' '},\n            fontSubfamily: {en: options.styleName || ' '},\n            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n            postScriptName: {en: options.postScriptName || options.familyName + options.styleName},\n            designer: {en: options.designer || ' '},\n            designerURL: {en: options.designerURL || ' '},\n            manufacturer: {en: options.manufacturer || ' '},\n            manufacturerURL: {en: options.manufacturerURL || ' '},\n            license: {en: options.license || ' '},\n            licenseURL: {en: options.licenseURL || ' '},\n            version: {en: options.version || 'Version 0.1'},\n            description: {en: options.description || ' '},\n            copyright: {en: options.copyright || ' '},\n            trademark: {en: options.trademark || ' '}\n        };\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = { os2: {\n            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n        } };\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new encoding.DefaultEncoding(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function(c) {\n    var glyphIndex = this.charToGlyphIndex(c);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function(s, options) {\n    options = options || this.defaultRenderOptions;\n    var i;\n    // Get glyph indexes\n    var indexes = [];\n    for (i = 0; i < s.length; i += 1) {\n        var c = s[i];\n        indexes.push(this.charToGlyphIndex(c));\n    }\n    var length = indexes.length;\n\n    // Apply substitutions on glyph indexes\n    if (options.features) {\n        var script = options.script || this.substitution.getDefaultScriptName();\n        var manyToOne = [];\n        if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n        if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n        for (i = 0; i < length; i += 1) {\n            for (var j = 0; j < manyToOne.length; j++) {\n                var ligature = manyToOne[j];\n                var components = ligature.sub;\n                var compCount = components.length;\n                var k = 0;\n                while (k < compCount && components[k] === indexes[i + k]) k++;\n                if (k === compCount) {\n                    indexes.splice(i, compCount, ligature.by);\n                    length = length - compCount + 1;\n                }\n            }\n        }\n    }\n\n    // convert glyph indexes to glyph objects\n    var glyphs = new Array(length);\n    var notdef = this.glyphs.get(0);\n    for (i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function(name) {\n    var glyphIndex = this.nameToGlyphIndex(name);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.getGposKerningValue;\n    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :\n        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: {\n        liga: true,\n        rlig: true\n    }\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = options || this.defaultRenderOptions;\n    var fontScale = 1 / this.unitsPerEm * fontSize;\n    var glyphs = this.stringToGlyphs(text, options);\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        callback(glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    var fullPath = new path.Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n        fullPath.extend(glyphPath);\n    });\n\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyps of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    var glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n        glyphPaths.push(glyphPath);\n    });\n\n    return glyphPaths;\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function(name) {\n    var translations = this.names[name];\n    if (translations) {\n        return translations.en;\n    }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function() {\n    var warnings = [];\n    var _this = this;\n\n    function assert(predicate, message) {\n        if (!predicate) {\n            warnings.push(message);\n        }\n    }\n\n    function assertNamePresent(name) {\n        var englishName = _this.getEnglishName(name);\n        assert(englishName && englishName.trim().length > 0,\n               'No English ' + name + ' specified.');\n    }\n\n    // Identification information\n    assertNamePresent('fontFamily');\n    assertNamePresent('weightName');\n    assertNamePresent('manufacturer');\n    assertNamePresent('copyright');\n    assertNamePresent('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function() {\n    return sfnt.fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function() {\n    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n    return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function() {\n    var sfntTable = this.toTables();\n    var bytes = sfntTable.encode();\n    var buffer = new ArrayBuffer(bytes.length);\n    var intArray = new Uint8Array(buffer);\n    for (var i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function(fileName) {\n    var familyName = this.getEnglishName('fontFamily');\n    var styleName = this.getEnglishName('fontSubfamily');\n    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n    var arrayBuffer = this.toArrayBuffer();\n\n    if (util.isBrowser()) {\n        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n        window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs) {\n            fs.root.getFile(fileName, {create: true}, function(fileEntry) {\n                fileEntry.createWriter(function(writer) {\n                    var dataView = new DataView(arrayBuffer);\n                    var blob = new Blob([dataView], {type: 'font/opentype'});\n                    writer.write(blob);\n\n                    writer.addEventListener('writeend', function() {\n                        // Navigating to the file will download it.\n                        location.href = fileEntry.toURL();\n                    }, false);\n                });\n            });\n        },\n        function(err) {\n            throw new Error(err.name + ': ' + err.message);\n        });\n    } else {\n        var fs = require('fs');\n        var buffer = util.arrayBufferToNodeBuffer(arrayBuffer);\n        fs.writeFileSync(fileName, buffer);\n    }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC:              0x001, //1\n    UNDERSCORE:          0x002, //2\n    NEGATIVE:            0x004, //4\n    OUTLINED:            0x008, //8\n    STRIKEOUT:           0x010, //16\n    BOLD:                0x020, //32\n    REGULAR:             0x040, //64\n    USER_TYPO_METRICS:   0x080, //128\n    WWS:                 0x100, //256\n    OBLIQUE:             0x200  //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK:    900\n};\n\nexports.Font = Font;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opentype.js/src/font.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/opentype.js/src/font.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}}],"sources":{"node_modules/opentype.js/src/font.js":"// The Font object\n\n'use strict';\n\nvar path = require('./path');\nvar sfnt = require('./tables/sfnt');\nvar encoding = require('./encoding');\nvar glyphset = require('./glyphset');\nvar Substitution = require('./substitution');\nvar util = require('./util');\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        util.checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n        util.checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n        util.checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n        util.checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n        util.checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n        util.checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n        this.names = {\n            fontFamily: {en: options.familyName || ' '},\n            fontSubfamily: {en: options.styleName || ' '},\n            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n            postScriptName: {en: options.postScriptName || options.familyName + options.styleName},\n            designer: {en: options.designer || ' '},\n            designerURL: {en: options.designerURL || ' '},\n            manufacturer: {en: options.manufacturer || ' '},\n            manufacturerURL: {en: options.manufacturerURL || ' '},\n            license: {en: options.license || ' '},\n            licenseURL: {en: options.licenseURL || ' '},\n            version: {en: options.version || 'Version 0.1'},\n            description: {en: options.description || ' '},\n            copyright: {en: options.copyright || ' '},\n            trademark: {en: options.trademark || ' '}\n        };\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = { os2: {\n            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n        } };\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new encoding.DefaultEncoding(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function(c) {\n    var glyphIndex = this.charToGlyphIndex(c);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function(s, options) {\n    options = options || this.defaultRenderOptions;\n    var i;\n    // Get glyph indexes\n    var indexes = [];\n    for (i = 0; i < s.length; i += 1) {\n        var c = s[i];\n        indexes.push(this.charToGlyphIndex(c));\n    }\n    var length = indexes.length;\n\n    // Apply substitutions on glyph indexes\n    if (options.features) {\n        var script = options.script || this.substitution.getDefaultScriptName();\n        var manyToOne = [];\n        if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n        if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n        for (i = 0; i < length; i += 1) {\n            for (var j = 0; j < manyToOne.length; j++) {\n                var ligature = manyToOne[j];\n                var components = ligature.sub;\n                var compCount = components.length;\n                var k = 0;\n                while (k < compCount && components[k] === indexes[i + k]) k++;\n                if (k === compCount) {\n                    indexes.splice(i, compCount, ligature.by);\n                    length = length - compCount + 1;\n                }\n            }\n        }\n    }\n\n    // convert glyph indexes to glyph objects\n    var glyphs = new Array(length);\n    var notdef = this.glyphs.get(0);\n    for (i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function(name) {\n    var glyphIndex = this.nameToGlyphIndex(name);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.getGposKerningValue;\n    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :\n        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: {\n        liga: true,\n        rlig: true\n    }\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = options || this.defaultRenderOptions;\n    var fontScale = 1 / this.unitsPerEm * fontSize;\n    var glyphs = this.stringToGlyphs(text, options);\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        callback(glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    var fullPath = new path.Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n        fullPath.extend(glyphPath);\n    });\n\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyps of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    var glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n        glyphPaths.push(glyphPath);\n    });\n\n    return glyphPaths;\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function(name) {\n    var translations = this.names[name];\n    if (translations) {\n        return translations.en;\n    }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function() {\n    var warnings = [];\n    var _this = this;\n\n    function assert(predicate, message) {\n        if (!predicate) {\n            warnings.push(message);\n        }\n    }\n\n    function assertNamePresent(name) {\n        var englishName = _this.getEnglishName(name);\n        assert(englishName && englishName.trim().length > 0,\n               'No English ' + name + ' specified.');\n    }\n\n    // Identification information\n    assertNamePresent('fontFamily');\n    assertNamePresent('weightName');\n    assertNamePresent('manufacturer');\n    assertNamePresent('copyright');\n    assertNamePresent('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function() {\n    return sfnt.fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function() {\n    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n    return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function() {\n    var sfntTable = this.toTables();\n    var bytes = sfntTable.encode();\n    var buffer = new ArrayBuffer(bytes.length);\n    var intArray = new Uint8Array(buffer);\n    for (var i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function(fileName) {\n    var familyName = this.getEnglishName('fontFamily');\n    var styleName = this.getEnglishName('fontSubfamily');\n    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n    var arrayBuffer = this.toArrayBuffer();\n\n    if (util.isBrowser()) {\n        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n        window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs) {\n            fs.root.getFile(fileName, {create: true}, function(fileEntry) {\n                fileEntry.createWriter(function(writer) {\n                    var dataView = new DataView(arrayBuffer);\n                    var blob = new Blob([dataView], {type: 'font/opentype'});\n                    writer.write(blob);\n\n                    writer.addEventListener('writeend', function() {\n                        // Navigating to the file will download it.\n                        location.href = fileEntry.toURL();\n                    }, false);\n                });\n            });\n        },\n        function(err) {\n            throw new Error(err.name + ': ' + err.message);\n        });\n    } else {\n        var fs = require('fs');\n        var buffer = util.arrayBufferToNodeBuffer(arrayBuffer);\n        fs.writeFileSync(fileName, buffer);\n    }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC:              0x001, //1\n    UNDERSCORE:          0x002, //2\n    NEGATIVE:            0x004, //4\n    OUTLINED:            0x008, //8\n    STRIKEOUT:           0x010, //16\n    BOLD:                0x020, //32\n    REGULAR:             0x040, //64\n    USER_TYPO_METRICS:   0x080, //128\n    WWS:                 0x100, //256\n    OBLIQUE:             0x200  //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK:    900\n};\n\nexports.Font = Font;\n"},"lineCount":529}},"error":null,"hash":"a11d26081a331b90b3ca38171839762d","cacheData":{"env":{}}}