{"id":"node_modules/opentype.js/src/tables/loca.js","dependencies":[{"name":"C:\\Users\\student\\code\\airbnb-clone\\package.json","includedInParent":true,"mtime":1603166701328},{"name":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\package.json","includedInParent":true,"mtime":1603166700396},{"name":"../parse","loc":{"line":6,"column":20},"parent":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\tables\\loca.js","resolved":"C:\\Users\\student\\code\\airbnb-clone\\node_modules\\opentype.js\\src\\parse.js"}],"generated":{"js":"// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\n'use strict';\n\nvar parse = require('../parse');\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    var glyphOffsets = [];\n    for (var i = 0; i < numGlyphs + 1; i += 1) {\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\nexports.parse = parseLocaTable;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opentype.js/src/tables/loca.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"node_modules/opentype.js/src/tables/loca.js":"// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\n'use strict';\n\nvar parse = require('../parse');\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    var glyphOffsets = [];\n    for (var i = 0; i < numGlyphs + 1; i += 1) {\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\nexports.parse = parseLocaTable;\n"},"lineCount":34}},"error":null,"hash":"a7cf179d7f00e0be1c1f9e7fe014a9c8","cacheData":{"env":{}}}